#include <stdio.h>
#include <stdlib.h>
#include <math.h>

// 1.(1) double power(double, int) that calculates x^n if we call power(x, n),
double power(double x, int n)
{
	double dbResult = 0;
	
	//printf("[%s] x:%lf, n:%d\n", __func__, x, n);

	// use C lib pow()
	dbResult = pow(x, n);
	
	//printf("[%s] x:%lf, n:%d => %lf\n", __func__, x, n, dbResult);
	
	return dbResult;
}

// 1.(2) double multiply(double, int) that calculate x*n if we call multiply(x, n),
double multiply(double x, int n)
{
	double dbResult = 0;
	
	//printf("[%s] x:%lf, n:%d\n", __func__, x, n);

	dbResult = x * n;
	//printf("[%s] x:%lf, n:%d => %lf\n", __func__, x, n, dbResult);
	
	return dbResult;
}

// 1.(3) double divide(double, int) that calculate x/n if we call divide(x, n), 
double divide(double x, int n)
{
	double dbResult = 0;
	
	//printf("[%s] x:%lf, n:%d\n", __func__, x, n);

	dbResult = x / n;
	//printf("[%s] x:%lf, n:%d => %lf\n", __func__, x, n, dbResult);
	
	return dbResult;
}

// 4. use typedef to define a new type F which is a pointer to function
typedef double (*F)(double, int);

// 2.Write a function double powerpower( K) that can compute (xn)m, (x*n)m, (x/n)m, 
// where powerpower() must use four parameters: a pointer to function, one double and two integers
double powerpower(F pfCal, double x, int n, int m)
{
	double dbResult = 0;
	
	dbResult = pfCal(x,n);
	dbResult = pow(dbResult,m);
	
	return dbResult;
}

int main(int argc, char *argv[]) {
	F pf_Cal;
	double dbl_x;
	int i_n;
	int i_m;
	double dbl_result;
	

#if 0 // test power
	printf("test power ...\n");
	dbl_x = 2;
	i_n = 3;
	dbl_result = power(dbl_x, i_n);
	printf("[%d] x:%lf, n:%d => %lf\n\n", __LINE__, dbl_x, i_n, dbl_result);
#endif

#if 0 // test multiply
	printf("test multiply ...\n");
	dbl_x = 2;
	i_n = 3;
	dbl_result = multiply(dbl_x, i_n);
	printf("[%d] x:%lf, n:%d => %lf\n\n", __LINE__, dbl_x, i_n, dbl_result);
#endif

#if 0 // test divide
	printf("test divide ...\n");
	dbl_x = 2;
	i_n = 3;
	dbl_result = divide(dbl_x, i_n);
	printf("[%d] x:%lf, n:%d => %lf\n\n", __LINE__, dbl_x, i_n, dbl_result);
#endif

#if 0	
	// test powerpower
	printf("test powerpower ...\n");
	dbl_x = 2;
	i_n = 3;
	i_m = 2;
	dbl_result = powerpower(power, dbl_x, i_n, i_m);
	printf("[%d] power x:%lf, n:%d, m:%d => %lf\n\n", __LINE__, dbl_x, i_n, i_m, dbl_result);
#endif	
	
#if 1 // print parameter ...
	int i;
	printf("argc:%d\n", argc);
	for( i = 0; i < argc; i += 1)
	{
		printf("%d %s\n", i, argv[i]);
	}
	printf("\n");
#endif
	
	// Check parameter number ...
	if( argc < 5 )
	{
		printf("[Error] Invalid parameter number! argc:%d\n", argc);
		return -1;
	}
	
	// 5. When executing your program, you can choose the values for x, n, and m by using argc and argv.
	// para-1: 0 -> power, 1 -> multiply, 2 -> divide
	// para-2: x
	// para-3: n
	// para-4: m
	
	// Get para-1 ...
	int i_func = 0;
	sscanf(argv[1], "%d", &i_func);
	
	// Get para-2 ...
	sscanf(argv[2], "%lf", &dbl_x);

	// Get para-3 ...
	sscanf(argv[3], "%d", &i_n);
	
	// Get para-4 ...
	sscanf(argv[4], "%d", &i_m);
	
	printf("[%d] Para: i_func:%d, x:%lf, n:%d, m:%d\n", __LINE__, i_func, dbl_x, i_n, i_m);
	
	// Convert i_func to function pointer
	switch(i_func)
	{
		case 0: // power
			pf_Cal = power;
			break;
		case 1: // multiply
			pf_Cal = multiply;
			break;
		case 2: // divide
			pf_Cal = divide;
			break;
		default:
			printf("[Error] Invalid para! i_func:%d \n", i_func);
			return -1;
			break;
	}
	
	// Call powerpower by using parameter
	dbl_result = powerpower(pf_Cal, dbl_x, i_n, i_m);
	printf("[%d] powerpower cal:%d x:%lf, n:%d, m:%d => %lf\n\n", __LINE__, i_func, dbl_x, i_n, i_m, dbl_result);
	
	return 0;
}
